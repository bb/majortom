== Topic Map Stores ==

The MaJorToM Topic Maps engine comes with a set of different topic map stores based on different data paradigms, like memory-based or databases. The following section explain the usage and benefits of the supported topic map stores.

=== In-Memory Topic Map Store ===

The In-Memory topic map store is a powerful and fast store to access information as fast as possible. All information are stored in the memory during the runtime and will be destroyed after shuting down the upper application. This means the In-Memory topic map store does not persist any information, this has to be realized by the upper application.

The current version of this topic map store supports all features of a MaJorToM engine, like transaction support and revision management.

==== Usage ====

To use the in-memory topic map store, the majortom-inMemory.jar should be located in the class path. If the Maven dependecy management is used, the following line should be added to the POM file.

------------------------------------
<dependencies>
      <dependency>
          <groupId>de.topicmapslab.majortom</groupId>
          <artifactId>majortom-inMemory</artifactId>
          <version>1.2.0-SNAPSHOT</version>
      </dependency>
  </dependencies>
------------------------------------

=== (O)RDBMS Topic Map Store ===

MaJorToM provides a generic JDBC topic map store to support different databases by one topic map store implementation, as shown in the following table.

|==========================================
|*Name*|*Supported*|*Optimized*|*Property*|
|MySQL|yes (since version 1.3.0)|no|MYSQL|
|PostGreSQL|yes|yes|POSTGRESQL|
|==========================================

*Please note:* To optimize the communication with the databases, MaJorToM implements a set of optimized SQL processors using stored procedures or trigger-based modifications. If the store procedures are provided by the database, the query processor will use them to speed up the performance.

As additional propteries the (O)RDBMS topic map store requires the connection properties to establish the connection to the used database. The following table contains the set of required properties of the (O)RDBMS topic map store. If at least one of the properties is missing an error occurred.

[cols="1,1"]
|==========================================
|*Property*|*Description*
|de.topicmapslab.majortom.jdbc.host|The host name or IP address of the database server
|de.topicmapslab.majortom.jdbc.database|The database name which should be used
|de.topicmapslab.majortom.jdbc.user|The user name to access the database
|de.topicmapslab.majortom.jdbc.password|The password to access the database
|de.topicmapslab.majortom.jdbc.dialect|The used database system type btw. the SQL dialect
|==========================================

==== Usage ====

To use the (O)RDBMS topic map store, the majortom-db.jar should be located in the class path. If the Maven dependecy management is used, the following line should be added to the POM file.

------------------------------------
<dependencies>
      <dependency>
          <groupId>de.topicmapslab.majortom</groupId>
          <artifactId>majortom-db</artifactId>
          <version>1.2.0</version>
      </dependency>
  </dependencies>
------------------------------------

After starting the application the (O)RDBMS topic map store checks if the database exists and the contained schema is valid for usage with MaJorToM. If the database is empty the schema will automatically created by MaJorToM.

=== Queued Topic Map Store ===

The Queued topic map store is a combination of the In-Memory and the RDBMS topic map store. All information are stored in the underlying database handled by the RDBMS topic map store. To speed up the write access, each modification is handled as process of an event queue. Until this process is finished, the information created or modified by this process are stored in a virtual in-memory layer. After finishing the process the information are removed from virtual layer and can be directly accessed by the RDBMS store. Additionaly the queued store also supports the 'commit' functionality which stops the process called until all tasks of the event queue are finished.

Because of that the queued store is the best combination of the fast read and write access of memory backends and the persistence of RDBMS backends.

The current version of this topic map store supports all features of a MaJorToM engine, like transaction support and revision management and also caching.

==== Usage ====

To use the queued topic map store, the majortom-queued.jar should be located in the class path. If the Maven dependecy management is used, the following line should be added to the POM file.

------------------------------------
<dependencies>
      <dependency>
          <groupId>de.topicmapslab.majortom</groupId>
          <artifactId>majortom-queued</artifactId>
          <version>1.2.0</version>
      </dependency>
  </dependencies>
------------------------------------

*Please note:* Because of the fact that the queued store combines the memory and the RDBMS store, all properties of both are needed.

=== Redis Topic Map Store ===

Since version 1.2.0, MaJorToM supports a generic topic map store using a redis backend. The Redis Store is the best combination of performance and persistency. Currently the redis does not supports any features of the API, in example the history management and the transaction are not supported yet. The schema of the redis store is documented http://docs.topicmapslab.de/majortom/redis.html[here]. 

Please note, that a topic map store only supports one topic map instance for each topic map system.

As additional properties, the Redis topic map store requieres a set of connection parameters. For easy useage, the store supports an interface 'IRedisTopicMapStoreProperty' containing all this parameter keys as string constants.

[cols="1,1"]
|==========================================
|*Property*|*Description*
|de.topicmapslab.majortom.redis.host|The host name or IP address of the database server. This parameter is mandatory.
|de.topicmapslab.majortom.redis.database|The database id which should be used.  This parameter is mandatory.
|de.topicmapslab.majortom.redis.password|The password to access the redis store. This parameter is optional.
|de.topicmapslab.majortom.redis.port|The port of the redis store. If the server uses the default port, the parameter can be missed.
|==========================================

==== Usage ====

To use the redis topic map store, the majortom-redis.jar should be located in the class path. If the Maven dependecy management is used, the following line should be added to the POM file.

------------------------------------
<dependencies>
      <dependency>
          <groupId>de.topicmapslab.majortom</groupId>
          <artifactId>majortom-redis</artifactId>
          <version>1.2.0</version>
      </dependency>
  </dependencies>
------------------------------------